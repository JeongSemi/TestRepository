package com.mycompany.myapp.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.mycompany.myapp.dto.PhotoBoard;

@Component
public class PhotoBoardDaoImpl implements PhotoBoardDao {

	private static final Logger LOGGER = LoggerFactory.getLogger(PhotoBoardDaoImpl.class);

	@Override
	public int boardWrite(PhotoBoard board) {
		int bno = -1;
		Connection conn = null;

		try {
			Class.forName("oracle.jdbc.OracleDriver");

			String url = "jdbc:oracle:thin:@117.17.198.43:1531:orcl";
			conn = DriverManager.getConnection(url, "djsuser", "iot12345");
			LOGGER.info("연결 성공");

			String sql = "insert into photoboard ";
			sql += "(bno, boriginalfilename, bsavedfilename, bfilecontent, btitle, bwriter, bpassword, bdate, bcontent, bhitcount) ";
			sql += "values ";
			sql += "(board_bno_seq.nextval, ?, ?, ?, ?, ?, ?, sysdate, ?, 0) ";

			PreparedStatement pstmt = conn.prepareStatement(sql, new String[] { "bno" });
			pstmt.setString(1, board.getBoriginalfilename());
			pstmt.setString(2, board.getBsavedfilename());
			pstmt.setString(3, board.getBfilecontent());
			pstmt.setString(4, board.getBtitle());
			pstmt.setString(5, board.getBwriter());
			pstmt.setString(6, board.getBpassword());
			pstmt.setString(7, board.getBcontent());

			pstmt.executeUpdate();
			ResultSet rs = pstmt.getGeneratedKeys();
			rs.next();
			bno = rs.getInt(1);
			// rs.close();
			pstmt.close();
			LOGGER.info("행 추가 성공");

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			// 연결 끊기
			try {
				conn.close();
				LOGGER.info("연결 끊김");
			} catch (SQLException e) {
			}
		}

		return bno;
	}

	@Override
	public int boardCountAll() {
		int count = 0;
		Connection conn = null;

		try {
			Class.forName("oracle.jdbc.OracleDriver");
			String url = "jdbc:oracle:thin:@117.17.198.43:1531:orcl";
			conn = DriverManager.getConnection(url, "djsuser", "iot12345");
			LOGGER.info("연결 성공");

			String sql = "select count(*) from photoboard";

			PreparedStatement pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery(); // 수정X, DB의 상태를 변경시켜라
			rs.next();
			count = rs.getInt(1);
			rs.close();
			pstmt.close();
			LOGGER.info("COUNT 성공");

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return count;
	}

	@Override
	public List<PhotoBoard> boardSelectPage(int pageNo, int rowsPerPage) {
		List<PhotoBoard> list = new ArrayList<>();
		Connection conn = null;

		try {
			Class.forName("oracle.jdbc.OracleDriver");
			String url = "jdbc:oracle:thin:@117.17.198.43:1531:orcl";
			conn = DriverManager.getConnection(url, "djsuser", "iot12345");
			LOGGER.info("연결 성공");

			String sql = "select * ";
			sql += "from ( ";
			sql += "  select rownum as r, bno, btitle, bwriter, bdate, bhitcount, boriginalfilename ";
			sql += "  from ( ";
			sql += "  select bno, btitle, bwriter, bdate, bhitcount, boriginalfilename from photoboard order by bno asc ";
			sql += "  ) ";
			sql += "  where rownum<=? ";
			sql += ") ";
			sql += "where r>=? ";

			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, pageNo * rowsPerPage);
			pstmt.setInt(2, (pageNo - 1) * rowsPerPage + 1);
			ResultSet rs = pstmt.executeQuery(); // 수정X, DB의 상태를 변경시켜라
			while (rs.next()) {
				PhotoBoard board = new PhotoBoard();
				board.setBno(rs.getInt("bno"));
				board.setBtitle(rs.getString("btitle"));
				board.setBwriter(rs.getString(4));
				board.setBdate(rs.getDate("bdate"));
				board.setBhitcount(rs.getInt("bhitcount"));
				board.setBoriginalfilename(rs.getString("boriginalfilename"));
				list.add(board);
			}
			rs.close();
			pstmt.close();
			LOGGER.info("SELECT 성공");

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return list;
	}
	
	@Override
	public PhotoBoard boardSelectByBno(int bno) {
		PhotoBoard board = null;
		Connection conn = null;

		try {
			Class.forName("oracle.jdbc.OracleDriver");
			String url = "jdbc:oracle:thin:@117.17.198.43:1531:orcl";
			conn = DriverManager.getConnection(url, "djsuser", "iot12345");
			LOGGER.info("연결 성공");

			String sql = "select * from photoboard where bno=?";

			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, bno);
			ResultSet rs = pstmt.executeQuery(); // 수정X, DB의 상태를 변경시켜라
			if (rs.next()) {
				board = new PhotoBoard();
				board.setBno(rs.getInt("bno"));
				board.setBtitle(rs.getString("btitle"));
				board.setBcontent(rs.getString("bcontent"));
				board.setBdate(rs.getDate("bdate"));
				board.setBwriter(rs.getString("bwriter"));
				board.setBpassword(rs.getString("bpassword"));
				board.setBhitcount(rs.getInt("bhitcount"));
				board.setBoriginalfilename(rs.getString("boriginalfilename"));
				board.setBsavedfilename(rs.getString("bsavedfilename"));
				board.setBfilecontent(rs.getString("bfilecontent"));
			}
			rs.close();
			pstmt.close();
			LOGGER.info("SELECTBYBNO 성공");

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return board;
	}
	
	@Override
	public void boardDelete(int bno) {
		Connection conn = null;

		try {
			Class.forName("oracle.jdbc.OracleDriver");
			String url = "jdbc:oracle:thin:@117.17.198.43:1531:orcl";
			conn = DriverManager.getConnection(url, "djsuser", "iot12345");
			LOGGER.info("연결 성공");

			String sql = "delete from member where mid=?";

			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mid);
			pstmt.executeUpdate();
			pstmt.close();
			LOGGER.info("UPDATE 성공");

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {

	}
}
